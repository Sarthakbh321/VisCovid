{"version":3,"sources":["components/Cards/DataCards.js","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/Picker/Picker.js","App.js","serviceWorker.js","index.js","components/Cards/DataCards.module.css","App.module.css","components/Cards/Cards.module.css","components/Chart/Chart.module.css"],"names":["DataCards","props","allData","data","infected","head","value","text","recovered","deaths","date","Date","toDateString","type","typeClass","styles","Grid","item","component","Card","xs","md","className","cx","card","CardContent","Typography","color","gutterBottom","variant","Cards","container","spacing","justify","url","fetch","country","a","newUrl","axios","get","res","console","log","getDaily","getCountries","response","countries","Chart","useState","dailyData","setDailyData","getDailyData","useEffect","lineGraph","length","labels","map","reportDate","datasets","confirmed","total","label","borderColor","fill","backgroundColor","Picker","handleCountryChange","setCountries","fetchCountries","c","FormControl","formControl","NativeSelect","onChange","event","target","i","name","key","App","changeData","setCurrentCountry","isLoading","setLoading","getData","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.f2d84a3c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport styles from \"./DataCards.module.css\";\nimport cx from \"classnames\";\n\nfunction DataCards(props) {\n\tlet allData = props.data.data;\n\n\tlet data = {\n\t\tinfected: {\n\t\t\thead: \"Infected\",\n\t\t\tdata: allData[\"confirmed\"].value,\n\t\t\ttext: \"Number Of active COVID cases\"\n\t\t},\n\t\trecovered: {\n\t\t\thead: \"Recovered\",\n\t\t\tdata: allData[\"recovered\"].value,\n\t\t\ttext: \"Number of people recovered\"\n\t\t},\n\t\tdeaths: {\n\t\t\thead: \"Deaths\",\n\t\t\tdata: allData[\"deaths\"].value,\n\t\t\ttext: \"Number of deaths\"\n\t\t},\n\t\tdate: new Date(allData[\"lastUpdate\"]).toDateString(),\n\t};\n\n\tlet type = props.type;\n\tlet typeClass = null;\n\tif(type === \"infected\") typeClass = styles.infected;\n\telse if(type === \"deaths\") typeClass = styles.deaths;\n\telse if(type === \"recovered\") typeClass = styles.recovered;\n\n\treturn (\n\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.card, typeClass)}>\n\t\t\t<CardContent>\n\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>{data[type].head}</Typography>\n\t\t\t\t<Typography variant=\"h5\">{data[type].data}</Typography>\n\t\t\t\t<Typography color=\"textSecondary\">{data.date}</Typography>\n\t\t\t\t<Typography variant=\"body2\">{data[type].text}</Typography>\n\t\t\t</CardContent>\n\t\t</Grid>\n\t)\n}\n\nexport default DataCards;","import React, { useEffect } from \"react\";\nimport {Card, CardContent, Grid, Typography} from '@material-ui/core';\nimport DataCards from './DataCards';\nimport styles from './Cards.module.css';\n\nfunction Cards(props) {\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<Grid container spacing={3} justify=\"center\">\n\t\t\t\t<DataCards type=\"infected\" data={props.data}/>\n\t\t\t\t<DataCards type=\"recovered\" data={props.data}/>\n\t\t\t\t<DataCards type=\"deaths\" data={props.data}/>\n\t\t\t</Grid>\n\t\t</div>\n\t);\n}\n\nexport default Cards;","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetch = async (country) => {\n    try {\n        let newUrl = url;\n\n        if(country) {\n            if(country === \"global\") {\n                newUrl = url;\n            } else {\n                newUrl = `${url}/countries/${country}`\n            }\n        } \n        \n        const res = await axios.get(newUrl);\n        return res;\n        \n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getDaily = async () => {\n    try {\n        const res = await axios.get(`${url}/daily`);\n        return res;\n    } catch(error) {\n        console.log(error);\n    }\n}\n\nexport const getCountries = async () => {\n    try {\n        const response = await axios.get(\"https://covid19.mathdro.id/api/countries\");\n        return response.data.countries;\n    } catch(error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { getDaily } from '../../api';\nimport {Line, Bar} from \"react-chartjs-2\";\nimport styles from './Chart.module.css';\n\nfunction Chart() {\n\tconst [dailyData, setDailyData] = useState([]);\n\t\n\tconst getDailyData = async () => {\n\t\tconst data = await getDaily();\n\t\tsetDailyData(data.data);\n\t}\n\n\tuseEffect(() => {\n\t\tgetDailyData();\n\t}, [])\n\n\tconst lineGraph = (\n\t\tdailyData.length !== 0 ?\n\t\t\t<Line data={{\n\t\t\t\tlabels: dailyData.map(({reportDate}) => reportDate),\n\t\t\t\tdatasets: [{\n\t\t\t\t\tdata: dailyData.map(({confirmed}) => confirmed.total),\n\t\t\t\t\tlabel: \"Infected\",\n\t\t\t\t\tborderColor: \"#3333ff\",\n\t\t\t\t\tfill: true\n\t\t\t\t}, {\n\t\t\t\t\tdata: dailyData.map(({deaths}) => deaths.total),\n\t\t\t\t\tlabel: \"Deaths\",\n\t\t\t\t\tborderColor: \"red\",\n\t\t\t\t\tbackgroundColor: 'rgba(255, 0,0, 0.5',\n\t\t\t\t\tfill: true\n\t\t\t\t}],\n\t\t\t}} />\n\t\t\t: null\n\t);\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t{lineGraph}\n\t\t</div>\n\t)\n}\n\nexport default Chart;","import React, { useEffect, useState } from \"react\";\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\nimport styles from \"./Picker.module.css\";\nimport { getCountries } from '../../api';\n\nfunction Picker({handleCountryChange}) {\n\tconst [countries, setCountries] = useState([]);\n\n\tconst fetchCountries = async () => {\n\t\tlet c = await getCountries();\n\t\tsetCountries(c);\n\t}\n\n\tuseEffect(() => {\n\t\tfetchCountries();\n\t}, [setCountries])\n\n\treturn (\n\t\t<FormControl className={styles.formControl}>\n\t\t\t<NativeSelect onChange={(event) => handleCountryChange(event.target.value)}>\n\t\t\t\t<option value=\"global\">Global</option>\n\t\t\t\t{countries.map((country, i) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<option value={country.name} key={i}>{country.name}</option>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</NativeSelect>\n\t\t</FormControl>\n\t)\n}\n\nexport default Picker;","import React, { useEffect, useState } from 'react';\nimport styles from './App.module.css';\nimport Cards from './components/Cards/Cards';\nimport { fetch } from './api/index';\nimport Chart from './components/Chart/Chart';\nimport { CircularProgress } from \"@material-ui/core\";\nimport Picker from \"./components/Picker/Picker\";\n\nfunction App() {\n\tconst [data, changeData] = useState(\"Getting Data\");\n\tconst [currentCountry, setCurrentCountry] = useState(\"global\");\n\tconst [isLoading, setLoading] = useState(true);\n\n\tconst handleCountryChange = async (country) => {\n\t\ttry {\n\t\t\tconst data = await fetch(country);\n\t\t\tsetCurrentCountry(country);\n\t\t\tchangeData(data);\n\t\t} catch(error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst getData = async () => {\n\t\ttry {\n\t\t\tconst data = await fetch();\n\t\t\tchangeData(data);\n\t\t\tsetLoading(false);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\treturn (\n\t\tisLoading === true ? <CircularProgress /> :\n\t\t\t<div className={styles.container}>\n\t\t\t\t<Cards data={data} />\n\t\t\t\t<Picker handleCountryChange={handleCountryChange} />\n\t\t\t\t<Chart />\n\t\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"DataCards_card__1bfg0\",\"infected\":\"DataCards_infected__35BF2\",\"deaths\":\"DataCards_deaths__3r1PV\",\"recovered\":\"DataCards_recovered__2fEMf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};"],"sourceRoot":""}